up_path_version:
  desc: 'Tizen up path version'
  env:
    CURRENT_VERSION: { fn.Json: [ 'package.json', [ 'version' ], cwd: env.PLATFORM_ROOT ] }
    NEXT_VERSION: { fn.UpVersion: [ { fn.Json: [ 'package.json', [ 'version' ], cwd: env.PLATFORM_ROOT ] }, separator: '.', section: '2' ] }
    NEXT_V_VERSION: { fn.Join: [ 'v', env.NEXT_VERSION, separator: '' ] }
    PREFIX_BRANCH: { fn.Split: [ { fn.git.BranchName: [ cwd: env.PLATFORM_ROOT ] }, separator: '/', section: '0' ] }
  required:
    - PLATFORM_ROOT
    - CURRENT_VERSION
    - NEXT_VERSION
    - NEXT_V_VERSION
    - PREFIX_BRANCH
  steps:
    - switch:
        value: env.SB_INPUT
        cases:
          - case: 'yes'
          - case: 'default'
            steps:
              - shell.Echo: [ '\nSpecify \"-i yes\" to execute this command.\n' ]
              - shell.Exit: ''

    - shell.Git: [ 'checkout', '-f', 'package-lock.json', cwd: env.PLATFORM_ROOT ]
    - shell.git.Pull: [ cwd: env.PLATFORM_ROOT ]
    - shell.Git: [ 'branch', '-m', { fn.Join: [ env.PREFIX_BRANCH, '/', env.NEXT_V_VERSION, separator: '' ] }, cwd: env.PLATFORM_ROOT ]
    - edit.Json: [ 'package.json', [ 'version' ], env.NEXT_VERSION, cwd: env.PLATFORM_ROOT ]
    - edit.Json: [ 'package.json', [ 'coreLibraryVersion' ], { fn.Json: [ 'package.json', [ 'version' ], cwd: env.JS_CORE_ROOT ] }, cwd: env.PLATFORM_ROOT ]
    - edit.Json: [ 'package-lock.json', [ 'version' ], env.NEXT_VERSION, cwd: env.PLATFORM_ROOT ]
    - shell.Git: [ 'add', 'package.json', cwd: env.PLATFORM_ROOT ]
    - shell.Git: [ 'add', 'package-lock.json', cwd: env.PLATFORM_ROOT ]
    - shell.Git: [ 'commit', '-m', { fn.Join: [ 'Bumped version to', env.NEXT_VERSION, separator: ' ' ] }, cwd: env.PLATFORM_ROOT ]
    - shell.Git:
        - 'push'
        - 'origin'
        - { fn.Join: [ env.PREFIX_BRANCH, '/', env.NEXT_V_VERSION, separator: '' ] }
        - { fn.Join: [ ':', env.PREFIX_BRANCH, '/', 'v', env.CURRENT_VERSION, separator: '' ] }
        - cwd: env.PLATFORM_ROOT
    - switch:
        value: env.PREFIX_BRANCH
        cases:
          - case: 'support'
            steps:
              - shell.Git: [ 'tag',  env.NEXT_V_VERSION, cwd: env.PLATFORM_ROOT ]
              - shell.Git: [ 'push', 'origin',  env.NEXT_V_VERSION, cwd: env.PLATFORM_ROOT ]
              - shell.Echo: [ 'Create tag:', env.NEXT_V_VERSION, 'for branch:', { fn.git.BranchName: [ cwd: env.PLATFORM_ROOT ] } ]
          - case: 'default'
            steps:
              - shell.Echo: [ 'Skip create tag:', env.NEXT_V_VERSION, 'for branch:', { fn.git.BranchName: [ cwd: env.PLATFORM_ROOT ] } ]