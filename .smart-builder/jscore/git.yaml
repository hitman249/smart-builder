branch:
  desc: 'JS Core branch'
  steps:
    - shell.Echo: [ 'Branch:', { fn.git.BranchName: [ cwd: env.PLATFORM_ROOT ] } ]
    - shell.Echo: [ '' ]

status:
  desc: 'JS Core branch status'
  steps:
    - shell.Echo: [ 'Branch: ', { fn.git.BranchName: [ cwd: env.PLATFORM_ROOT ] } ]
    - shell.Echo: [ '' ]
    - shell.Git: [ 'status', cwd: env.PLATFORM_ROOT ]
    - shell.Echo: [ '' ]

up_path_version:
  desc: 'JS Core up path version'
  steps:
    - shell.git.Pull: [ cwd: env.PLATFORM_ROOT ]
    - shell.Git: [ 'branch', '-m', { fn.Join: [ env.PREFIX_BRANCH, '/', env.NEXT_V_VERSION, separator: '' ] }, cwd: env.PLATFORM_ROOT ]
    - edit.Json: [ 'package.json', [ 'version' ], env.NEXT_VERSION, cwd: env.PLATFORM_ROOT ]
    - shell.Git: [ 'add', 'package.json', cwd: env.PLATFORM_ROOT ]
    - shell.Git: [ 'commit', '-m', { fn.Join: [ 'Bumped version to', env.NEXT_VERSION, separator: ' ' ] }, cwd: env.PLATFORM_ROOT ]
    - shell.Git:
        - 'push'
        - 'origin'
        - { fn.Join: [ env.PREFIX_BRANCH, '/', env.NEXT_V_VERSION, separator: '' ] }
        - { fn.Join: [ ':', env.PREFIX_BRANCH, '/', 'v', env.CURRENT_VERSION, separator: '' ] }
        - cwd: env.PLATFORM_ROOT
    - shell.Git: [ 'tag',  env.NEXT_V_VERSION, cwd: env.PLATFORM_ROOT ]
    - shell.Git: [ 'push', 'origin',  env.NEXT_V_VERSION, cwd: env.PLATFORM_ROOT ]

  env:
    CURRENT_VERSION: { fn.Json: [ 'package.json', [ 'version' ], cwd: env.PLATFORM_ROOT ] }
    NEXT_VERSION: { fn.UpVersion: [ { fn.Json: [ 'package.json', [ 'version' ], cwd: env.PLATFORM_ROOT ] }, separator: '.', section: '2' ] }
    NEXT_V_VERSION: { fn.Join: [ 'v', env.NEXT_VERSION, separator: '' ] }
    PREFIX_BRANCH: { fn.Split: [ { fn.git.BranchName: [ cwd: env.PLATFORM_ROOT ] }, separator: '/', section: '0' ] }

  required:
    - PLATFORM_ROOT
    - CURRENT_VERSION
    - NEXT_VERSION
    - NEXT_V_VERSION
    - PREFIX_BRANCH
